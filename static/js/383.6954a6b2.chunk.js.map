{"version":3,"file":"static/js/383.6954a6b2.chunk.js","mappings":"2OAEaA,EAAe,mCACfC,EAAW,gCAElBC,EAAkB,mCAAG,oGACFC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,oCACkBD,EADlB,OADE,cACnBI,EADmB,yBAKlBA,EAASC,MALS,2CAAH,qDAQxB,M,kLCTMC,EAAkB,mCAAG,WAAMC,GAAN,uFACFJ,EAAAA,EAAAA,IAAA,UAClBF,EAAAA,GADkB,gCACcD,EAAAA,GADd,kBACoCO,EADpC,OADE,cACnBH,EADmB,yBAKlBA,EAASC,MALS,2CAAH,sDAQxB,I,uCCUaG,GAnBYC,EAAAA,GAAAA,OAAH,oaAmBOA,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,+KAUbE,GAAiBF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,wRAiBdI,EAAeJ,EAAAA,GAAAA,OAAH,ma,SCrCnBK,EAAgB,CACpBP,MAAO,IAyCT,EAtCkB,SAAC,GAAkB,IAAhBQ,EAAe,EAAfA,SAWnB,OACE,iCACE,SAAC,KAAD,CAAQD,cAAeA,EAAeC,SAZrB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBV,EAAUS,EAAVT,MACR,GAAqB,KAAjBA,EAAMW,OACR,OAAOC,EAAAA,GAAAA,QAAc,mCAErBJ,EAASR,GACTU,GAEH,EAIG,UACE,UAACT,EAAD,YACE,SAACK,EAAD,CAAcO,KAAK,SAAnB,UACE,SAAC,MAAD,CAAiBC,MAAM,QAAQC,KAAK,cAGtC,SAACX,EAAD,CACES,KAAK,OACLG,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,KAAK,gBAKX,SAAC,KAAD,CAAgBC,UAAW,IAAMC,MAAM,WAG5C,ECxCKC,GAAYC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IA2CvB,EAzCe,WAAO,IAAD,EACnB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GA6B/C,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAkB,KAAdF,EAAJ,CAGA,IAAMG,EAAS,mCAAG,6GAEKlC,EAAmB+B,GAFxB,UAGc,KADtBhC,EAFQ,QAGLoC,QAAQC,OAHH,uBAIZT,EAAU,IAJE,kBAKLd,EAAAA,GAAAA,MACL,sEANU,OASZc,EAAU5B,EAAKoC,SATH,mFAYPtB,EAAAA,GAAAA,MAAY,4CAZL,0DAAH,qDAefqB,GAhBC,CAiBF,GAAE,CAACH,KAGF,iCACE,SAAC,EAAD,CAAWtB,SA7BW,SAAAR,GAExB6B,EAD6B,KAAV7B,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,IA2BsB,IAAlByB,EAAOU,SAAgB,SAACb,EAAD,CAAWG,OAAQA,KAC3C,SAAC,KAAD,CAAgBL,UAAW,IAAMC,MAAM,WAG5C,C","sources":["components/services/fetchPopularMovies.js","components/services/fetchMoviesByQuery.js","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const PERSONAL_KEY = 'a4c56cb8fbee20099fe28460c31a452a';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst fetchPopularMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/all/day?api_key=${PERSONAL_KEY}\n`\n  );\n  return response.data;\n};\n\nexport default fetchPopularMovies;\n","import axios from 'axios';\nimport { PERSONAL_KEY } from './fetchPopularMovies';\nimport { BASE_URL } from './fetchPopularMovies';\n\nconst fetchMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${PERSONAL_KEY}&query=${query}\n`\n  );\n  return response.data;\n};\n\nexport default fetchMoviesByQuery;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const SubmitBtn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchbarForm = styled(Form)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchbarInput = styled(Field)`\n  display: inline-block;\n  height: 42px;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: 1px solid grey;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const SearchbarBtn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Formik } from 'formik';\nimport { AiOutlineSearch } from 'react-icons/ai';\n\nimport {\n  SearchbarForm,\n  SearchbarInput,\n  SearchbarBtn,\n} from './Searchbar.styled';\n\nconst initialValues = {\n  query: '',\n};\n\nconst Searchbar = ({ onSubmit }) => {\n  const handleSubmit = (values, { resetForm }) => {\n    const { query } = values;\n    if (query.trim() === '') {\n      return toast.warning('Value cannot be an ampty string');\n    } else {\n      onSubmit(query);\n      resetForm();\n    }\n  };\n\n  return (\n    <>\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        <SearchbarForm>\n          <SearchbarBtn type=\"submit\">\n            <AiOutlineSearch color=\"black\" size=\"1.5rem\" />\n          </SearchbarBtn>\n\n          <SearchbarInput\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            name=\"query\"\n          />\n        </SearchbarForm>\n      </Formik>\n\n      <ToastContainer autoClose={2000} theme=\"dark\" />\n    </>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { lazy } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport fetchMoviesByQuery from 'components/services/fetchMoviesByQuery';\n\nimport Searchbar from 'components/Searchbar';\nconst MovieList = lazy(() => import('components/MovieList'));\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n    const getMovies = async () => {\n      try {\n        const data = await fetchMoviesByQuery(movieName);\n        if (data.results.length === 0) {\n          setMovies([]);\n          return toast.error(\n            'There are no movies matching your search query. Please try again.'\n          );\n        } else {\n          setMovies(data.results);\n        }\n      } catch (error) {\n        return toast.error('Something went wrong. Please try again.');\n      }\n    };\n    getMovies();\n  }, [movieName]);\n\n  return (\n    <>\n      <Searchbar onSubmit={updateQueryString} />\n      {movies.length !== 0 && <MovieList movies={movies} />}\n      <ToastContainer autoClose={2000} theme=\"dark\" />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["PERSONAL_KEY","BASE_URL","fetchPopularMovies","axios","response","data","fetchMoviesByQuery","query","SearchbarForm","styled","Form","SearchbarInput","Field","SearchbarBtn","initialValues","onSubmit","values","resetForm","trim","toast","type","color","size","autoComplete","autoFocus","placeholder","name","autoClose","theme","MovieList","lazy","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","getMovies","results","length"],"sourceRoot":""}